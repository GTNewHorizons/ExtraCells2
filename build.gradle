buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    dependencies {
        //Defaults to Java 8 & UTF-8 encoding
        classpath ("com.github.GTNH2:ForgeGradle:FG_1.2-SNAPSHOT")
        classpath ("org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.10")
    }
}

apply plugin: "java"
apply plugin: "scala"
apply plugin: "kotlin"
apply plugin: "forge"
apply plugin: "idea"

sourceSets {
    main {
        scala {
            srcDirs = ["src/main/scala"]
        }
        java {
            srcDirs = ["src/main/java"]
        }
        kotlin {
            srcDirs = ["src/main/kotlin","src/main/java"]
        }
    }
}

tasks.compileKotlin.dependsOn.add(tasks.compileScala)
tasks.compileScala.dependsOn.remove("compileJava")

compileKotlin.classpath += files(compileScala.destinationDir)
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

ext.buildProps = file("build.properties")

version = "NIGHTLY"
if (System.getenv("BUILD_NUMBER") != null) {
	version = "${System.getenv("BUILD_NUMBER")}"
}
if (System.getenv("DRONE_BUILD_NUMBER") != null) {
	version = "${System.getenv("DRONE_BUILD_NUMBER")}"
}

buildProps.withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = "${config.version.minecraft}-${config.version.mod.major}.${config.version.mod.minor}.${config.version.mod.revis}b" + getBuildNumber() + "-kotlin-mod"
group = "extracells"
archivesBaseName = "ExtraCells"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

logger.lifecycle "$archivesBaseName-$version"
logger.lifecycle "" + version

minecraft {
    version = "${config.version.minecraft}-${config.version.forge}-${config.version.minecraft}"
    runDir = "../../MinecraftDebug/run_client"
}

repositories {
    maven {
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven {
        name "CB Repo"
        url "http://chickenbones.net/maven/"
    }
	
	maven {
		name "Open Computers"
		url "http://maven.cil.li/"
	}

    maven {
        name = "Forestry and IC2 repo"
        url = "http://maven.ic2.player.to/"
    }

	maven {
        name = "IGW"
        url = "http://maven.k-4u.nl/"
    }

    ivy {
        name "BuildCraft"
        artifactPattern "http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision]-[classifier].[ext]"
    }
	
	maven {
		name "GT6 Maven"
		url "https://gregtech.overminddl1.com/"
	}
	maven {
		name "GTNH Maven"
		url "http://jenkins.usrv.eu:8081/nexus/content/repositories/releases/"
	}

	ivy {
		artifactPattern "http://downloads.gtnewhorizons.com/Mods_for_Jenkins/[module]_[revision].[ext]"
	}
    ivy {
        artifactPattern "http://downloads.gtnewhorizons.com/Mods_for_Jenkins/[module]-[revision].[ext]"
    }
}

dependencies {
    implementation(files("${projectDir}/libs"))
    //implementation name: "CoFHCore", version: config.cofhcore.version, ext: "jar"
	implementation ("mcp.mobius.waila:Waila:${config.version.waila}"){
        transitive = false
	}
	implementation ("li.cil.oc:OpenComputers:${config.version.oc}:dev")
	implementation ("codechicken:CodeChickenLib:${config.version.minecraft}-${config.version.ccl}:dev")
    implementation ("codechicken:CodeChickenCore:${config.version.minecraft}-${config.version.ccc}:dev")
    implementation ("codechicken:NotEnoughItems:${config.version.minecraft}-${config.version.nei}:dev")
	implementation ("igwmod:IGW-Mod-${config.version.minecraft}:${config.version.igw}:userdev")
    implementation (group: "", name: "buildcraft", version: "${config.version.bc}", classifier: "dev", ext: "jar")
    // implementation name: "WirelessCraftingTerminal", version: config.version.wc, ext: "jar"
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include ("**/*.lang")
        include ("**/*.info")
        include ("**/*.properties")

        expand ("version": project.version, "mcversion": project.minecraft.version)
    }

    from(sourceSets.main.resources.srcDirs) {
        include ("**/*.lang")
        include ("**/*.info")
        include ("**/*.properties")

        expand ("version": "${config.version.mod.major}.${config.version.mod.minor}.${config.version.mod.revis}", "mcversion": project.minecraft.version)
    }
}

task deobfJar(type: Jar) {
    from (sourceSets.main.output)
    from (sourceSets.main.scala)
    from (sourceSets.main.kotlin)
    from (sourceSets.main.java)
    getArchiveAppendix().set("deobf")
}

artifacts {
    archives(deobfJar)
}

def static getBuildNumber() {
    if (System.getenv("BUILD_NUMBER") != null) {
        return "${System.getenv("BUILD_NUMBER")}"
    }
    else if (System.getenv("DRONE_BUILD_NUMBER") != null) {
        return "${System.getenv("DRONE_BUILD_NUMBER")}"
    }
    return "NIGHTLY"
}

idea {
    module {
        outputDir = file("build/classes/main")
    }
}